generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  classification   Classification[]
  clients          Client[]
  settings         CompanySettings?
  currencyRates    CurrencyRate[]
  operator         Operator[]
  sales            Sale[]
  suppliers        Supplier[]
  supplierPayments SupplierPayment[]
  users            User[]
}

model User {
  id        Int      @id @default(autoincrement())
  companyId Int
  username  String   @unique
  email     String   @unique
  password  String
  role      UserRole
  createdAt DateTime @default(now())
  sales     Sale[]
  company   Company  @relation(fields: [companyId], references: [id])
}

model Client {
  id        Int      @id @default(autoincrement())
  companyId Int
  name      String
  clientId  String?
  address   String?
  email     String?
  createdAt DateTime @default(now())
  company   Company  @relation(fields: [companyId], references: [id])
  sales     Sale[]
}

model Sale {
  id               Int               @id @default(autoincrement())
  companyId        Int
  passengerName    String
  clientId         Int
  creationDate     DateTime          @default(now())
  travelDate       DateTime
  saleType         SaleType
  region           Region
  serviceType      ServiceType
  status           SaleStatus        @default(confirmed)
  sellerId         Int
  passengerCount   Int
  totalCost        Float
  salePrice        Float
  invoices         Invoice[]
  passengers       Passenger[]
  payments         Payment[]
  client           Client            @relation(fields: [clientId], references: [id])
  company          Company           @relation(fields: [companyId], references: [id])
  seller           User              @relation(fields: [sellerId], references: [id])
  items            SaleItem[]
  supplierPayments SupplierPayment[] @relation("SupplierPaymentSales")
}

model Passenger {
  id          Int       @id @default(autoincrement())
  name        String
  passengerId String    @unique
  email       String?
  dateOfBirth String
  saleId      Int?
  saleItemId  Int?
  companyId   Int
  Sale        Sale?     @relation(fields: [saleId], references: [id])
  SaleItem    SaleItem? @relation(fields: [saleItemId], references: [id])
}

model SaleItem {
  id              Int              @id @default(autoincrement())
  dateIn          DateTime?
  dateOut         DateTime?
  passengerCount  Int
  status          ItemStatus       @default(pending)
  description     String?
  salePrice       Float
  costPrice       Float
  reservationCode String?
  paymentDate     DateTime?
  saleId          Int
  passengers      Passenger[]
  sale            Sale             @relation(fields: [saleId], references: [id])
  classification  Classification[] @relation("ClassificationToSaleItem")
  operator        Operator[]       @relation("OperatorToSaleItem")
  supplier        Supplier[]       @relation("SaleItemToSupplier")
}

model Invoice {
  id            Int      @id @default(autoincrement())
  saleId        Int
  invoiceNumber String   @unique
  date          DateTime @default(now())
  amount        Float
  currency      Currency
  status        String
  sale          Sale     @relation(fields: [saleId], references: [id])
}

model Payment {
  id        Int           @id @default(autoincrement())
  saleId    Int
  date      DateTime      @default(now())
  amount    Float
  currency  Currency
  method    PaymentMethod
  reference String
  status    String
  sale      Sale          @relation(fields: [saleId], references: [id])
}

model SupplierPayment {
  id            Int      @id @default(autoincrement())
  companyId     Int
  supplierId    Int
  amount        Float
  currency      Currency
  paymentDate   DateTime @default(now())
  description   String
  paymentMethod String
  reference     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id])
  supplier      Supplier @relation(fields: [supplierId], references: [id])
  relatedSales  Sale[]   @relation("SupplierPaymentSales")
}

model Supplier {
  id        Int               @id @default(autoincrement())
  name      String
  companyId Int
  company   Company           @relation(fields: [companyId], references: [id])
  payments  SupplierPayment[]
  saleItems SaleItem[]        @relation("SaleItemToSupplier")
}

model Operator {
  id        Int        @id @default(autoincrement())
  name      String
  companyId Int
  company   Company    @relation(fields: [companyId], references: [id])
  saleItems SaleItem[] @relation("OperatorToSaleItem")
}

model Classification {
  id        Int        @id @default(autoincrement())
  name      String
  companyId Int
  company   Company    @relation(fields: [companyId], references: [id])
  saleItems SaleItem[] @relation("ClassificationToSaleItem")
}

model CompanySettings {
  id              Int      @id @default(autoincrement())
  companyId       Int      @unique
  defaultCurrency String   @default("USD")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  company         Company  @relation(fields: [companyId], references: [id])
}

model CurrencyRate {
  id          Int      @id @default(autoincrement())
  companyId   Int
  currency    String
  rate        Float
  isActive    Boolean  @default(true)
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id])

  @@unique([companyId, currency])
}

enum UserRole {
  admin
  sales
  finance
}

enum SaleType {
  individual
  corporate
  sports
  group
}

enum Region {
  national
  international
  regional
}

enum ServiceType {
  flight
  hotel
  package
  transfer
  excursion
  insurance
  other
}

enum SaleStatus {
  draft
  confirmed
  completed
  cancelled
}

enum Currency {
  USD
  EUR
  local
}

enum ItemStatus {
  pending
  confirmed
  cancelled
}

enum PaymentMethod {
  creditCard
  cash
  transfer
}
