// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  admin
  sales
  finance
}

enum SaleType {
  individual
  corporate
  sports
  group
}

enum Region {
  national
  international
  regional
}

enum ServiceType {
  flight
  hotel
  package
  transfer
  excursion
  insurance
  other
}

enum SaleStatus {
  draft
  confirmed
  completed
  cancelled
}

enum Currency {
  USD
  EUR
  local
}

enum ItemStatus {
  pending
  confirmed
  cancelled
}

enum PaymentMethod {
  creditCard
  cash
  transfer
}

// Models
model Company {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  users   User[]
  clients Client[]
  sales   Sale[]
  suppliers Supplier[]
  operator Operator[]
  classification Classification[]
}

model User {
  id        Int      @id @default(autoincrement())
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int
  username  String   @unique
  email     String   @unique
  password  String
  role      UserRole
  createdAt DateTime @default(now())
  sales     Sale[] // Relation to sales where user is the seller
}

model Client {
  id        Int      @id @default(autoincrement())
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int
  name      String
  clientId  String?  
  address   String?
  email     String?
  createdAt DateTime @default(now())
  sales     Sale[]
}

model Sale {
  id               Int               @id @default(autoincrement())
  company          Company           @relation(fields: [companyId], references: [id])
  companyId        Int
  passengerName    String
  client           Client            @relation(fields: [clientId], references: [id])
  clientId         Int
  creationDate     DateTime          @default(now())
  travelDate       DateTime
  saleType         SaleType
  region           Region
  serviceType      ServiceType
  status           SaleStatus        @default(confirmed)
  currency         Currency
  seller           User              @relation(fields: [sellerId], references: [id])
  sellerId         Int
  passengerCount   Int
  items            SaleItem[]
  totalCost        Float
  salePrice        Float
  invoices         Invoice[]
  payments         Payment[]
  supplierPayments SupplierPayment[]
}

model SaleItem {
  id              Int              @id @default(autoincrement())
  classification  Classification[]
  supplier        Supplier[]
  operator        Operator[]
  dateIn          DateTime?
  dateOut         DateTime?
  passengerCount  Int
  status          ItemStatus       @default(pending)
  description     String?
  salePrice       Float
  costPrice       Float
  reservationCode String?
  paymentDate     DateTime?
  sale            Sale             @relation(fields: [saleId], references: [id])
  saleId          Int
}

model Invoice {
  id            Int      @id @default(autoincrement())
  sale          Sale     @relation(fields: [saleId], references: [id])
  saleId        Int
  invoiceNumber String   @unique
  date          DateTime @default(now())
  amount        Float
  currency      Currency
  status        String // pending, paid, cancelled
}

model Payment {
  id        Int           @id @default(autoincrement())
  sale      Sale          @relation(fields: [saleId], references: [id])
  saleId    Int
  date      DateTime      @default(now())
  amount    Float
  currency  Currency
  method    PaymentMethod
  reference String
  status    String // pending, confirmed
}

model SupplierPayment {
  id              Int      @id @default(autoincrement())
  operator        String
  date            DateTime @default(now())
  operationNumber String   @unique
  amount          Float
  currency        Currency
  paymentMethod   String
  relatedSales    Sale[] // Many-to-many relation with sales
}

// For these models, I assume they do not need company scope unless you want to add it:
model Supplier {
  id         Int         @id @default(autoincrement())
  name       String
  saleItems  SaleItem[]
  company    Company     @relation(fields: [companyId], references: [id])
  companyId  Int
}

model Operator {
  id         Int         @id @default(autoincrement())
  name       String
  saleItems  SaleItem[]
  company    Company     @relation(fields: [companyId], references: [id])
  companyId  Int
}

model Classification {
  id         Int         @id @default(autoincrement())
  name       String
  saleItems  SaleItem[]
  company    Company     @relation(fields: [companyId], references: [id])
  companyId  Int
}